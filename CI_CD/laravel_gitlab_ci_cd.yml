stages:
  - build
  - test
  - deploy

variables:
  USER: "ubuntu" # SSH user for deployment
  APP_DIR: "/var/www/laravel-cicd" # Application directory path

before_script:
  - apk add --no-cache openssh-client # Install SSH client
  - mkdir -p ~/.ssh # Create SSH directory
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519 # Add SSH private key
  - chmod 600 ~/.ssh/id_ed25519 # Set permissions for the SSH key
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config' # Disable strict host key checking in Docker

build-prod:
  stage: build
  when: manual # Manual trigger for the build job
  script:
    - echo "Building the application..."
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer # Install Composer
    - composer install --no-dev --optimize-autoloader # Install PHP dependencies
    - apk add --no-cache nodejs npm # Install Node.js and npm
    - npm install # Install JavaScript dependencies
    - npm run build # Build frontend assets
  artifacts:
    paths:
      - vendor # Save vendor directory
      - node_modules # Save node_modules directory
      - public # Save public directory
  only:
    - main # Only run on the main branch

test-prod:
  stage: test
  when: on_success # Run this stage only if the previous stage succeeded
  needs:
    - job: build-prod
      artifacts: true # Use artifacts from the build stage
  script:
    - echo "Running tests..."
    - cp .env.example .env # Create a .env file from the example
    - php artisan key:generate # Generate an application key
    - sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=sqlite/g' .env # Change DB connection to SQLite for testing
    - composer install # Install dependencies again for testing
    - php artisan migrate --force # Run migrations
    - php artisan db:seed # Seed the database
    - php artisan test # Run tests
  only:
    - main # Only run on the main branch

deploy-prod:
  stage: deploy
  when: manual # Manual trigger for the deploy job
  image: alpine:latest # Use Alpine as the base image
  script:
    - echo "Deploying to production..."
    - ssh $USER@$PROD_HOST "cd $APP_DIR && php artisan down" # Put the application in maintenance mode
    - ssh $USER@$PROD_HOST "cd $APP_DIR && git pull origin main" # Pull the latest code from the main branch
    - ssh $USER@$PROD_HOST "cd $APP_DIR && npm install" # Install frontend dependencies
    - ssh $USER@$PROD_HOST "cd $APP_DIR && npm run build" # Build frontend assets
    - ssh $USER@$PROD_HOST "cd $APP_DIR && composer install --no-dev --optimize-autoloader" # Install PHP dependencies
    - ssh $USER@$PROD_HOST "cd $APP_DIR && php artisan optimize:clear" # Clear any cached files
    - ssh $USER@$PROD_HOST "cd $APP_DIR && php artisan migrate --force" # Run database migrations
    - ssh $USER@$PROD_HOST "cd $APP_DIR && php artisan up" # Bring the application back online
    - ssh $USER@$PROD_HOST "cd $APP_DIR && php artisan optimize" # Optimize the application
    - ssh $USER@$PROD_HOST "cd $APP_DIR && php artisan event:cache" # Cache events for better performance
  only:
    - main # Only run on the main branch
